"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

defmodule ProjectEuler.Problem2 do
  def sum_fibonacci_evens_up_to(limit) do
    fibonacci_up_to(limit)
    |> Stream.filter(&even?/1)
    |> Enum.sum
  end

  defp fibonacci_up_to(limit) do
    fibonacci([], limit)
  end

  defp fibonacci(acc = [last | [second_last | _tail]], limit) when last + second_last > limit do
    acc |> Enum.reverse
  end

  defp fibonacci(acc = [last | [second_last | _tail]], limit) do
    fibonacci([last + second_last | acc], limit)
  end

  defp fibonacci([], limit), do: fibonacci([2, 1], limit)

  defp even?(num), do: rem(num, 2) == 0
end
